package com.mycompany.coachmeai;

import com.mycompany.DAO.DatabaseConnection;
import com.mycompany.DAO.DatabaseManager;
import com.mycompany.utils.Auth;
import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.util.HashMap;
import java.util.Map;
import javax.swing.border.Border;

public class TestInterface extends JPanel {

    public static String[] cauTraloi;
    private Map<Integer, String> answers = new HashMap<>();
    private ButtonGroup[] buttonGroups;
    private JRadioButton[][] optionButtons;

    public TestInterface(String[][] questions, String stuID, String sub, String taskLab, int id_bai_test, int ID_nhiem_Vu) {
        setLayout(new BorderLayout());
        setBackground(Color.WHITE);

        cauTraloi = new String[questions.length];

        // Panel ch·ª©a th√¥ng tin h·ªçc vi√™n
        JPanel infoPanel = new JPanel();
        infoPanel.setLayout(new BoxLayout(infoPanel, BoxLayout.Y_AXIS));
        infoPanel.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));
        infoPanel.setBackground(Color.WHITE); // N·ªÅn tr·∫Øng

        JLabel studentIdLabel = new JLabel("M√£ h·ªçc vi√™n: " + stuID);
        JLabel subjectLabel = new JLabel("M√¥n h·ªçc: " + sub);
        JLabel taskLabel = new JLabel("Nhi·ªám v·ª•: " + taskLab);

        Font infoFont = new Font("Arial", Font.BOLD, 14);
        studentIdLabel.setFont(infoFont);
        subjectLabel.setFont(infoFont);
        taskLabel.setFont(infoFont);

        infoPanel.add(studentIdLabel);
        infoPanel.add(subjectLabel);
        infoPanel.add(taskLabel);
        add(infoPanel, BorderLayout.NORTH);

        // Panel ch·ª©a c√°c c√¢u h·ªèi
        JPanel panel = new JPanel();
        panel.setBackground(Color.white); // N·ªÅn tr·∫Øng
        panel.setLayout(new BoxLayout(panel, BoxLayout.Y_AXIS));
        buttonGroups = new ButtonGroup[questions.length];
        optionButtons = new JRadioButton[questions.length][4];

        for (int i = 0; i < questions.length; i++) {
            JPanel questionPanel = new JPanel(new BorderLayout());

            JLabel questionLabel = new JLabel("<html><b>" + (i + 1) + ". " + questions[i][0] + "</b></html>");
            questionPanel.add(questionLabel, BorderLayout.NORTH);
            questionPanel.setBackground(Color.WHITE); // N·ªÅn tr·∫Øng

            buttonGroups[i] = new ButtonGroup();
            JPanel optionsPanel = new JPanel(new FlowLayout(FlowLayout.LEFT));
            optionsPanel.setBackground(Color.WHITE); // N·ªÅn tr·∫Øng

            for (int j = 0; j < 4; j++) {
                optionButtons[i][j] = new JRadioButton((char) ('A' + j) + ". " + questions[i][j + 1]);
                optionButtons[i][j].setBackground(Color.WHITE); // N·ªÅn tr·∫Øng
                buttonGroups[i].add(optionButtons[i][j]);
                optionsPanel.add(optionButtons[i][j]);
            }
            questionPanel.add(optionsPanel, BorderLayout.CENTER);
            panel.add(questionPanel);
        }
        JPanel panelTong = new JPanel(new BorderLayout());
        Box box = Box.createHorizontalBox();
        JPanel spaceLeft = new JPanel();
        spaceLeft.setPreferredSize(new Dimension(25, 0)); // Chi·ªÅu r·ªông 25px, chi·ªÅu cao 0
        spaceLeft.setBackground(Color.WHITE);

        JPanel spaceTop = new JPanel();
        spaceTop.setPreferredSize(new Dimension(0, 25)); // Chi·ªÅu r·ªông 0, chi·ªÅu cao 25px
        spaceTop.setBackground(Color.WHITE);

        JPanel spaceRight = new JPanel();
        spaceRight.setPreferredSize(new Dimension(25, 0));
        spaceRight.setBackground(Color.WHITE);

        panelTong.add(spaceLeft, BorderLayout.WEST);
        panelTong.add(spaceTop, BorderLayout.NORTH);
        panelTong.add(spaceRight, BorderLayout.EAST);
        JScrollPane scrollPane = new JScrollPane(panel);
        scrollPane.setBackground(Color.WHITE); // N·ªÅn tr·∫Øng
        scrollPane.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10)); // Tr√°i, tr√™n, ph·∫£i, d∆∞·ªõi
        Border outerBorder = BorderFactory.createLineBorder(new Color(3, 39, 87), 2);  // Vi·ªÅn ngo√†i d√†y 5px
        Border innerBorder = BorderFactory.createEmptyBorder(10, 10, 10, 10); // Kho·∫£ng c√°ch b√™n trong
        Border compoundBorder = BorderFactory.createCompoundBorder(outerBorder, innerBorder);
        scrollPane.setBorder(compoundBorder);
        scrollPane.getViewport().setBackground(Color.WHITE); // ƒê·∫£m b·∫£o n·ªÅn tr·∫Øng khi cu·ªôn
        scrollPane.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED);
        scrollPane.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);
        panelTong.add(scrollPane, BorderLayout.CENTER);
        add(panelTong, BorderLayout.CENTER);

        // Panel ch·ª©a n√∫t "N·ªôp b√†i"
        JPanel bottomPanel = new JPanel();
        bottomPanel.setBackground(Color.WHITE);
        JButton submitButton = new RoundedButton("üì• N·ªôp b√†i");
        submitButton.setForeground(Color.WHITE);
        bottomPanel.add(submitButton);
        add(bottomPanel, BorderLayout.SOUTH);

        submitButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                if (!isAllQuestionsAnswered()) {
                    JOptionPane.showMessageDialog(null, "‚ö† B·∫°n ch∆∞a ch·ªçn ƒë·∫ßy ƒë·ªß c√°c c√¢u h·ªèi!", "C·∫£nh b√°o", JOptionPane.WARNING_MESSAGE);
                    return;
                }

                for (int i = 0; i < questions.length; i++) {
                    for (int j = 0; j < 4; j++) {
                        if (optionButtons[i][j].isSelected()) {
//                            answers.put(i, questions[i][j + 1]);
//                            cauTraloi[i] = questions[i][j + 1];  // L∆∞u ƒë√°p √°n v√†o bi·∫øn static
                            answers.put(i, String.valueOf((char) ('A' + j)));  // Thay ƒë·ªïi ·ªü ƒë√¢y
                            cauTraloi[i] = String.valueOf((char) ('A' + j));  // Th√™m d√≤ng n√†y ƒë·ªÉ l∆∞u v√†o m·∫£ng static

                        }
                    }
                }

                float diem = DatabaseManager.ChamDiem(cauTraloi, id_bai_test);
                if (diem >= 8) {
                    boolean dauHieu = true;
                    JOptionPane.showMessageDialog(null, "‚úÖ B√†i l√†m ƒë√£ ƒë∆∞·ª£c n·ªôp!");
                    if (dauHieu) {
                        try (Connection conn = DatabaseConnection.getConnection()) {
                            String sql = "UPDATE Nhiem_Vu SET Trang_Thai = N'Ho√†n th√†nh' WHERE ID_Nhiem_Vu=?";
                            PreparedStatement stmt = conn.prepareStatement(sql);
                            stmt.setInt(1, ID_nhiem_Vu);
                            stmt.executeUpdate();
                            JOptionPane.showMessageDialog(null, "ƒê√£ ho√†n th√†nh nhi·ªám v·ª•!");
                        } catch (Exception ex) {
                            ex.printStackTrace();
                            JOptionPane.showMessageDialog(null, "L·ªói khi c·∫≠p nh·∫≠t tr·∫°ng th√°i: " + ex.getMessage());
                        }
                    } else {
                        System.out.println("bai lam chua duoc nop");
                    }
                    trangchu.addPanel(new TestResultPanel(DatabaseManager.getTestans(cauTraloi, id_bai_test), stuID, sub, taskLab, String.valueOf(diem)), "ket_qua");

                } else {
                    JOptionPane.showMessageDialog(null, "B·∫°n ph·∫£i ho√†n th√†nh tr√™n 80%");
                }
            }
        });
    }

    private boolean isAllQuestionsAnswered() {
        for (int i = 0; i < buttonGroups.length; i++) {
            if (buttonGroups[i].getSelection() == null) {
                return false;
            }
        }
        return true;
    }

}
